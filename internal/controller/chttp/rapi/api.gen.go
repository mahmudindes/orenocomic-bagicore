// Package rapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package rapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

type contextKey string

const (
	BearerAuthScopes contextKey = "BearerAuth.Scopes"
)

// Comic defines model for Comic.
type Comic struct {
	Chapters  *[]ComicChapter `json:"chapters,omitempty"`
	Code      string          `json:"code"`
	CreatedAt time.Time       `json:"createdAt"`
	ID        uint            `json:"id"`
	Links     *[]Link         `json:"links,omitempty"`
	UpdatedAt *time.Time      `json:"updatedAt"`
}

// ComicChapter defines model for ComicChapter.
type ComicChapter struct {
	Chapter    string     `json:"chapter"`
	CreatedAt  time.Time  `json:"createdAt"`
	ID         uint       `json:"id"`
	Links      *[]Link    `json:"links,omitempty"`
	ReleasedAt time.Time  `json:"releasedAt"`
	UpdatedAt  *time.Time `json:"updatedAt"`
	Version    *string    `json:"version"`
}

// ComicChapterLink defines model for ComicChapterLink.
type ComicChapterLink struct {
	CreatedAt         time.Time  `json:"createdAt"`
	LinkID            uint       `json:"linkID"`
	LinkRelativeURL   string     `json:"linkRelativeURL"`
	LinkWebsiteDomain string     `json:"linkWebsiteDomain"`
	UpdatedAt         *time.Time `json:"updatedAt"`
}

// ComicLink defines model for ComicLink.
type ComicLink struct {
	CreatedAt         time.Time  `json:"createdAt"`
	LinkID            uint       `json:"linkID"`
	LinkRelativeURL   string     `json:"linkRelativeURL"`
	LinkWebsiteDomain string     `json:"linkWebsiteDomain"`
	UpdatedAt         *time.Time `json:"updatedAt"`
}

// Error defines model for Error.
type Error struct {
	Error struct {
		Message string `json:"message"`
		Status  string `json:"status"`
	} `json:"error"`
}

// Language defines model for Language.
type Language struct {
	CreatedAt time.Time  `json:"createdAt"`
	ID        uint       `json:"id"`
	IETF      string     `json:"ietf"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// Link defines model for Link.
type Link struct {
	CreatedAt     time.Time   `json:"createdAt"`
	ID            uint        `json:"id"`
	MachineTL     *bool       `json:"machineTL"`
	RelativeURL   string      `json:"relativeURL"`
	TLLanguages   *[]Language `json:"tlLanguages,omitempty"`
	UpdatedAt     *time.Time  `json:"updatedAt"`
	WebsiteDomain string      `json:"websiteDomain"`
	WebsiteID     uint        `json:"websiteID"`
}

// LinkTLLanguage defines model for LinkTLLanguage.
type LinkTLLanguage struct {
	CreatedAt    time.Time  `json:"createdAt"`
	LanguageID   uint       `json:"languageID"`
	LanguageIETF string     `json:"languageIETF"`
	UpdatedAt    *time.Time `json:"updatedAt"`
}

// NewComic defines model for NewComic.
type NewComic struct {
	Code string `json:"code"`
}

// NewComicChapter defines model for NewComicChapter.
type NewComicChapter struct {
	Chapter    string    `json:"chapter"`
	ReleasedAt time.Time `json:"releasedAt"`
	Version    *string   `json:"version"`
}

// NewComicChapterLink defines model for NewComicChapterLink.
type NewComicChapterLink struct {
	LinkID            *uint   `json:"linkID"`
	LinkRelativeURL   *string `json:"linkRelativeURL"`
	LinkWebsiteDomain *string `json:"linkWebsiteDomain"`
}

// NewComicLink defines model for NewComicLink.
type NewComicLink struct {
	LinkID            *uint   `json:"linkID"`
	LinkRelativeURL   *string `json:"linkRelativeURL"`
	LinkWebsiteDomain *string `json:"linkWebsiteDomain"`
}

// NewLanguage defines model for NewLanguage.
type NewLanguage struct {
	IETF string `json:"ietf"`
	Name string `json:"name"`
}

// NewLink defines model for NewLink.
type NewLink struct {
	MachineTL     *bool   `json:"machineTL"`
	RelativeURL   string  `json:"relativeURL"`
	WebsiteDomain *string `json:"websiteDomain"`
	WebsiteID     *uint   `json:"websiteID"`
}

// NewLinkTLLanguage defines model for NewLinkTLLanguage.
type NewLinkTLLanguage struct {
	LanguageID   *uint   `json:"languageID"`
	LanguageIETF *string `json:"languageIETF"`
}

// NewWebsite defines model for NewWebsite.
type NewWebsite struct {
	Domain    string `json:"domain"`
	MachineTL *bool  `json:"machineTL"`
	Name      string `json:"name"`
}

// NewWebsiteTLLanguage defines model for NewWebsiteTLLanguage.
type NewWebsiteTLLanguage struct {
	LanguageID   *uint   `json:"languageID"`
	LanguageIETF *string `json:"languageIETF"`
}

// Object defines model for Object.
type Object struct {
	CreatedAt time.Time  `json:"createdAt"`
	ID        uint       `json:"id"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// SetComic defines model for SetComic.
type SetComic struct {
	Code *string `json:"code"`
}

// SetComicChapter defines model for SetComicChapter.
type SetComicChapter struct {
	Chapter    *string    `json:"chapter"`
	ReleasedAt *time.Time `json:"releasedAt"`
	SetNull    []string   `json:"setNull,omitempty"`
	Version    *string    `json:"version"`
}

// SetComicChapterLink defines model for SetComicChapterLink.
type SetComicChapterLink struct {
	LinkID            *uint   `json:"linkID"`
	LinkRelativeURL   *string `json:"linkRelativeURL"`
	LinkWebsiteDomain *string `json:"linkWebsiteDomain"`
}

// SetComicLink defines model for SetComicLink.
type SetComicLink struct {
	LinkID            *uint   `json:"linkID"`
	LinkRelativeURL   *string `json:"linkRelativeURL"`
	LinkWebsiteDomain *string `json:"linkWebsiteDomain"`
}

// SetLanguage defines model for SetLanguage.
type SetLanguage struct {
	IETF *string `json:"ietf"`
	Name *string `json:"name"`
}

// SetLink defines model for SetLink.
type SetLink struct {
	MachineTL     *bool    `json:"machineTL"`
	RelativeURL   *string  `json:"relativeURL"`
	SetNull       []string `json:"setNull,omitempty"`
	WebsiteDomain *string  `json:"websiteDomain"`
	WebsiteID     *uint    `json:"websiteID"`
}

// SetLinkTLLanguage defines model for SetLinkTLLanguage.
type SetLinkTLLanguage struct {
	LanguageID   *uint   `json:"languageID"`
	LanguageIETF *string `json:"languageIETF"`
}

// SetWebsite defines model for SetWebsite.
type SetWebsite struct {
	Domain    *string `json:"domain"`
	MachineTL *bool   `json:"machineTL"`
	Name      *string `json:"name"`
}

// SetWebsiteTLLanguage defines model for SetWebsiteTLLanguage.
type SetWebsiteTLLanguage struct {
	LanguageID   *uint   `json:"languageID"`
	LanguageIETF *string `json:"languageIETF"`
}

// Website defines model for Website.
type Website struct {
	CreatedAt   time.Time   `json:"createdAt"`
	Domain      string      `json:"domain"`
	ID          uint        `json:"id"`
	MachineTL   *bool       `json:"machineTL"`
	Name        string      `json:"name"`
	TLLanguages *[]Language `json:"tlLanguages,omitempty"`
	UpdatedAt   *time.Time  `json:"updatedAt"`
}

// WebsiteTLLanguage defines model for WebsiteTLLanguage.
type WebsiteTLLanguage struct {
	CreatedAt    time.Time  `json:"createdAt"`
	LanguageID   uint       `json:"languageID"`
	LanguageIETF string     `json:"languageIETF"`
	UpdatedAt    *time.Time `json:"updatedAt"`
}

// Default defines model for Default.
type Default = Error

// ListComicParams defines parameters for ListComic.
type ListComicParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListComicChapterParams defines parameters for ListComicChapter.
type ListComicChapterParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListLanguageParams defines parameters for ListLanguage.
type ListLanguageParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListLinkParams defines parameters for ListLink.
type ListLinkParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListWebsiteParams defines parameters for ListWebsite.
type ListWebsiteParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// AddComicJSONRequestBody defines body for AddComic for application/json ContentType.
type AddComicJSONRequestBody = NewComic

// AddComicFormdataRequestBody defines body for AddComic for application/x-www-form-urlencoded ContentType.
type AddComicFormdataRequestBody = NewComic

// UpdateComicJSONRequestBody defines body for UpdateComic for application/json ContentType.
type UpdateComicJSONRequestBody = SetComic

// UpdateComicFormdataRequestBody defines body for UpdateComic for application/x-www-form-urlencoded ContentType.
type UpdateComicFormdataRequestBody = SetComic

// AddComicChapterJSONRequestBody defines body for AddComicChapter for application/json ContentType.
type AddComicChapterJSONRequestBody = NewComicChapter

// AddComicChapterFormdataRequestBody defines body for AddComicChapter for application/x-www-form-urlencoded ContentType.
type AddComicChapterFormdataRequestBody = NewComicChapter

// UpdateComicChapterJSONRequestBody defines body for UpdateComicChapter for application/json ContentType.
type UpdateComicChapterJSONRequestBody = SetComicChapter

// UpdateComicChapterFormdataRequestBody defines body for UpdateComicChapter for application/x-www-form-urlencoded ContentType.
type UpdateComicChapterFormdataRequestBody = SetComicChapter

// AddComicChapterLinkJSONRequestBody defines body for AddComicChapterLink for application/json ContentType.
type AddComicChapterLinkJSONRequestBody = NewComicChapterLink

// AddComicChapterLinkFormdataRequestBody defines body for AddComicChapterLink for application/x-www-form-urlencoded ContentType.
type AddComicChapterLinkFormdataRequestBody = NewComicChapterLink

// UpdateComicChapterLinkJSONRequestBody defines body for UpdateComicChapterLink for application/json ContentType.
type UpdateComicChapterLinkJSONRequestBody = SetComicChapterLink

// UpdateComicChapterLinkFormdataRequestBody defines body for UpdateComicChapterLink for application/x-www-form-urlencoded ContentType.
type UpdateComicChapterLinkFormdataRequestBody = SetComicChapterLink

// AddComicLinkJSONRequestBody defines body for AddComicLink for application/json ContentType.
type AddComicLinkJSONRequestBody = NewComicLink

// AddComicLinkFormdataRequestBody defines body for AddComicLink for application/x-www-form-urlencoded ContentType.
type AddComicLinkFormdataRequestBody = NewComicLink

// UpdateComicLinkJSONRequestBody defines body for UpdateComicLink for application/json ContentType.
type UpdateComicLinkJSONRequestBody = SetComicLink

// UpdateComicLinkFormdataRequestBody defines body for UpdateComicLink for application/x-www-form-urlencoded ContentType.
type UpdateComicLinkFormdataRequestBody = SetComicLink

// AddLanguageJSONRequestBody defines body for AddLanguage for application/json ContentType.
type AddLanguageJSONRequestBody = NewLanguage

// AddLanguageFormdataRequestBody defines body for AddLanguage for application/x-www-form-urlencoded ContentType.
type AddLanguageFormdataRequestBody = NewLanguage

// UpdateLanguageJSONRequestBody defines body for UpdateLanguage for application/json ContentType.
type UpdateLanguageJSONRequestBody = SetLanguage

// UpdateLanguageFormdataRequestBody defines body for UpdateLanguage for application/x-www-form-urlencoded ContentType.
type UpdateLanguageFormdataRequestBody = SetLanguage

// AddLinkJSONRequestBody defines body for AddLink for application/json ContentType.
type AddLinkJSONRequestBody = NewLink

// AddLinkFormdataRequestBody defines body for AddLink for application/x-www-form-urlencoded ContentType.
type AddLinkFormdataRequestBody = NewLink

// UpdateLinkJSONRequestBody defines body for UpdateLink for application/json ContentType.
type UpdateLinkJSONRequestBody = SetLink

// UpdateLinkFormdataRequestBody defines body for UpdateLink for application/x-www-form-urlencoded ContentType.
type UpdateLinkFormdataRequestBody = SetLink

// AddLinkTLLanguageJSONRequestBody defines body for AddLinkTLLanguage for application/json ContentType.
type AddLinkTLLanguageJSONRequestBody = NewLinkTLLanguage

// AddLinkTLLanguageFormdataRequestBody defines body for AddLinkTLLanguage for application/x-www-form-urlencoded ContentType.
type AddLinkTLLanguageFormdataRequestBody = NewLinkTLLanguage

// UpdateLinkTLLanguageJSONRequestBody defines body for UpdateLinkTLLanguage for application/json ContentType.
type UpdateLinkTLLanguageJSONRequestBody = SetLinkTLLanguage

// UpdateLinkTLLanguageFormdataRequestBody defines body for UpdateLinkTLLanguage for application/x-www-form-urlencoded ContentType.
type UpdateLinkTLLanguageFormdataRequestBody = SetLinkTLLanguage

// AddWebsiteJSONRequestBody defines body for AddWebsite for application/json ContentType.
type AddWebsiteJSONRequestBody = NewWebsite

// AddWebsiteFormdataRequestBody defines body for AddWebsite for application/x-www-form-urlencoded ContentType.
type AddWebsiteFormdataRequestBody = NewWebsite

// UpdateWebsiteJSONRequestBody defines body for UpdateWebsite for application/json ContentType.
type UpdateWebsiteJSONRequestBody = SetWebsite

// UpdateWebsiteFormdataRequestBody defines body for UpdateWebsite for application/x-www-form-urlencoded ContentType.
type UpdateWebsiteFormdataRequestBody = SetWebsite

// AddWebsiteTLLanguageJSONRequestBody defines body for AddWebsiteTLLanguage for application/json ContentType.
type AddWebsiteTLLanguageJSONRequestBody = NewWebsiteTLLanguage

// AddWebsiteTLLanguageFormdataRequestBody defines body for AddWebsiteTLLanguage for application/x-www-form-urlencoded ContentType.
type AddWebsiteTLLanguageFormdataRequestBody = NewWebsiteTLLanguage

// UpdateWebsiteTLLanguageJSONRequestBody defines body for UpdateWebsiteTLLanguage for application/json ContentType.
type UpdateWebsiteTLLanguageJSONRequestBody = SetWebsiteTLLanguage

// UpdateWebsiteTLLanguageFormdataRequestBody defines body for UpdateWebsiteTLLanguage for application/x-www-form-urlencoded ContentType.
type UpdateWebsiteTLLanguageFormdataRequestBody = SetWebsiteTLLanguage

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List comic.
	// (GET /comics)
	ListComic(w http.ResponseWriter, r *http.Request, params ListComicParams)
	// Add comic.
	// (POST /comics)
	AddComic(w http.ResponseWriter, r *http.Request)
	// Delete comic.
	// (DELETE /comics/{code})
	DeleteComic(w http.ResponseWriter, r *http.Request, code string)
	// Get comic.
	// (GET /comics/{code})
	GetComic(w http.ResponseWriter, r *http.Request, code string)
	// Update comic.
	// (PATCH /comics/{code})
	UpdateComic(w http.ResponseWriter, r *http.Request, code string)
	// List comic chapter.
	// (GET /comics/{code}/chapters)
	ListComicChapter(w http.ResponseWriter, r *http.Request, code string, params ListComicChapterParams)
	// Add comic chapter.
	// (POST /comics/{code}/chapters)
	AddComicChapter(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic chapter.
	// (DELETE /comics/{code}/chapters/{cv})
	DeleteComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string)
	// Get comic chapter.
	// (GET /comics/{code}/chapters/{cv})
	GetComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string)
	// Update comic chapter.
	// (PATCH /comics/{code}/chapters/{cv})
	UpdateComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string)
	// Add comic chapter link.
	// (POST /comics/{code}/chapters/{cv}/links)
	AddComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string)
	// Delete comic chapter link.
	// (DELETE /comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL})
	DeleteComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string, websiteDomain string, relativeURL string)
	// Get comic chapter link.
	// (GET /comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL})
	GetComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string, websiteDomain string, relativeURL string)
	// Update comic chapter link.
	// (PATCH /comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL})
	UpdateComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string, websiteDomain string, relativeURL string)
	// Add comic link.
	// (POST /comics/{code}/links)
	AddComicLink(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic link.
	// (DELETE /comics/{code}/links/{websiteDomain}-{relativeURL})
	DeleteComicLink(w http.ResponseWriter, r *http.Request, code string, websiteDomain string, relativeURL string)
	// Get comic link.
	// (GET /comics/{code}/links/{websiteDomain}-{relativeURL})
	GetComicLink(w http.ResponseWriter, r *http.Request, code string, websiteDomain string, relativeURL string)
	// Update comic link.
	// (PATCH /comics/{code}/links/{websiteDomain}-{relativeURL})
	UpdateComicLink(w http.ResponseWriter, r *http.Request, code string, websiteDomain string, relativeURL string)
	// List language.
	// (GET /languages)
	ListLanguage(w http.ResponseWriter, r *http.Request, params ListLanguageParams)
	// Add language.
	// (POST /languages)
	AddLanguage(w http.ResponseWriter, r *http.Request)
	// Delete language.
	// (DELETE /languages/{ietf})
	DeleteLanguage(w http.ResponseWriter, r *http.Request, ietf string)
	// Get language.
	// (GET /languages/{ietf})
	GetLanguage(w http.ResponseWriter, r *http.Request, ietf string)
	// Update language.
	// (PATCH /languages/{ietf})
	UpdateLanguage(w http.ResponseWriter, r *http.Request, ietf string)
	// List link.
	// (GET /links)
	ListLink(w http.ResponseWriter, r *http.Request, params ListLinkParams)
	// Add link.
	// (POST /links)
	AddLink(w http.ResponseWriter, r *http.Request)
	// Delete link.
	// (DELETE /links/{websiteDomain}-{relativeURL})
	DeleteLink(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string)
	// Get link.
	// (GET /links/{websiteDomain}-{relativeURL})
	GetLink(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string)
	// Update link.
	// (PATCH /links/{websiteDomain}-{relativeURL})
	UpdateLink(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string)
	// Add link TL language.
	// (POST /links/{websiteDomain}-{relativeURL}/tl-languages)
	AddLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string)
	// Delete link TL language.
	// (DELETE /links/{websiteDomain}-{relativeURL}/tl-languages/{ietf})
	DeleteLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string, ietf string)
	// Get link TL language.
	// (GET /links/{websiteDomain}-{relativeURL}/tl-languages/{ietf})
	GetLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string, ietf string)
	// Update link TL language.
	// (PATCH /links/{websiteDomain}-{relativeURL}/tl-languages/{ietf})
	UpdateLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string, ietf string)
	// List website.
	// (GET /websites)
	ListWebsite(w http.ResponseWriter, r *http.Request, params ListWebsiteParams)
	// Add website.
	// (POST /websites)
	AddWebsite(w http.ResponseWriter, r *http.Request)
	// Delete website.
	// (DELETE /websites/{domain})
	DeleteWebsite(w http.ResponseWriter, r *http.Request, domain string)
	// Get website.
	// (GET /websites/{domain})
	GetWebsite(w http.ResponseWriter, r *http.Request, domain string)
	// Update website.
	// (PATCH /websites/{domain})
	UpdateWebsite(w http.ResponseWriter, r *http.Request, domain string)
	// Add website TL language.
	// (POST /websites/{domain}/tl-languages)
	AddWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string)
	// Delete website TL language.
	// (DELETE /websites/{domain}/tl-languages/{ietf})
	DeleteWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string, ietf string)
	// Get website TL language.
	// (GET /websites/{domain}/tl-languages/{ietf})
	GetWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string, ietf string)
	// Update website TL language.
	// (PATCH /websites/{domain}/tl-languages/{ietf})
	UpdateWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string, ietf string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List comic.
// (GET /comics)
func (_ Unimplemented) ListComic(w http.ResponseWriter, r *http.Request, params ListComicParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic.
// (POST /comics)
func (_ Unimplemented) AddComic(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic.
// (DELETE /comics/{code})
func (_ Unimplemented) DeleteComic(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic.
// (GET /comics/{code})
func (_ Unimplemented) GetComic(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic.
// (PATCH /comics/{code})
func (_ Unimplemented) UpdateComic(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List comic chapter.
// (GET /comics/{code}/chapters)
func (_ Unimplemented) ListComicChapter(w http.ResponseWriter, r *http.Request, code string, params ListComicChapterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic chapter.
// (POST /comics/{code}/chapters)
func (_ Unimplemented) AddComicChapter(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic chapter.
// (DELETE /comics/{code}/chapters/{cv})
func (_ Unimplemented) DeleteComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic chapter.
// (GET /comics/{code}/chapters/{cv})
func (_ Unimplemented) GetComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic chapter.
// (PATCH /comics/{code}/chapters/{cv})
func (_ Unimplemented) UpdateComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic chapter link.
// (POST /comics/{code}/chapters/{cv}/links)
func (_ Unimplemented) AddComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic chapter link.
// (DELETE /comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) DeleteComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic chapter link.
// (GET /comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) GetComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic chapter link.
// (PATCH /comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) UpdateComicChapterLink(w http.ResponseWriter, r *http.Request, code string, cv string, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic link.
// (POST /comics/{code}/links)
func (_ Unimplemented) AddComicLink(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic link.
// (DELETE /comics/{code}/links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) DeleteComicLink(w http.ResponseWriter, r *http.Request, code string, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic link.
// (GET /comics/{code}/links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) GetComicLink(w http.ResponseWriter, r *http.Request, code string, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic link.
// (PATCH /comics/{code}/links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) UpdateComicLink(w http.ResponseWriter, r *http.Request, code string, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List language.
// (GET /languages)
func (_ Unimplemented) ListLanguage(w http.ResponseWriter, r *http.Request, params ListLanguageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add language.
// (POST /languages)
func (_ Unimplemented) AddLanguage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete language.
// (DELETE /languages/{ietf})
func (_ Unimplemented) DeleteLanguage(w http.ResponseWriter, r *http.Request, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get language.
// (GET /languages/{ietf})
func (_ Unimplemented) GetLanguage(w http.ResponseWriter, r *http.Request, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update language.
// (PATCH /languages/{ietf})
func (_ Unimplemented) UpdateLanguage(w http.ResponseWriter, r *http.Request, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List link.
// (GET /links)
func (_ Unimplemented) ListLink(w http.ResponseWriter, r *http.Request, params ListLinkParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add link.
// (POST /links)
func (_ Unimplemented) AddLink(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete link.
// (DELETE /links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) DeleteLink(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get link.
// (GET /links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) GetLink(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update link.
// (PATCH /links/{websiteDomain}-{relativeURL})
func (_ Unimplemented) UpdateLink(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add link TL language.
// (POST /links/{websiteDomain}-{relativeURL}/tl-languages)
func (_ Unimplemented) AddLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete link TL language.
// (DELETE /links/{websiteDomain}-{relativeURL}/tl-languages/{ietf})
func (_ Unimplemented) DeleteLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get link TL language.
// (GET /links/{websiteDomain}-{relativeURL}/tl-languages/{ietf})
func (_ Unimplemented) GetLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update link TL language.
// (PATCH /links/{websiteDomain}-{relativeURL}/tl-languages/{ietf})
func (_ Unimplemented) UpdateLinkTLLanguage(w http.ResponseWriter, r *http.Request, websiteDomain string, relativeURL string, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List website.
// (GET /websites)
func (_ Unimplemented) ListWebsite(w http.ResponseWriter, r *http.Request, params ListWebsiteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add website.
// (POST /websites)
func (_ Unimplemented) AddWebsite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete website.
// (DELETE /websites/{domain})
func (_ Unimplemented) DeleteWebsite(w http.ResponseWriter, r *http.Request, domain string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get website.
// (GET /websites/{domain})
func (_ Unimplemented) GetWebsite(w http.ResponseWriter, r *http.Request, domain string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update website.
// (PATCH /websites/{domain})
func (_ Unimplemented) UpdateWebsite(w http.ResponseWriter, r *http.Request, domain string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add website TL language.
// (POST /websites/{domain}/tl-languages)
func (_ Unimplemented) AddWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete website TL language.
// (DELETE /websites/{domain}/tl-languages/{ietf})
func (_ Unimplemented) DeleteWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get website TL language.
// (GET /websites/{domain}/tl-languages/{ietf})
func (_ Unimplemented) GetWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update website TL language.
// (PATCH /websites/{domain}/tl-languages/{ietf})
func (_ Unimplemented) UpdateWebsiteTLLanguage(w http.ResponseWriter, r *http.Request, domain string, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListComic operation middleware
func (siw *ServerInterfaceWrapper) ListComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComicParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListComic(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComic operation middleware
func (siw *ServerInterfaceWrapper) AddComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComic(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComic operation middleware
func (siw *ServerInterfaceWrapper) DeleteComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComic(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComic operation middleware
func (siw *ServerInterfaceWrapper) GetComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComic(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComic operation middleware
func (siw *ServerInterfaceWrapper) UpdateComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComic(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListComicChapter operation middleware
func (siw *ServerInterfaceWrapper) ListComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComicChapterParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListComicChapter(w, r, code, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicChapter operation middleware
func (siw *ServerInterfaceWrapper) AddComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicChapter(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicChapter operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicChapter(w, r, code, cv)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicChapter operation middleware
func (siw *ServerInterfaceWrapper) GetComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicChapter(w, r, code, cv)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicChapter operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicChapter(w, r, code, cv)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicChapterLink operation middleware
func (siw *ServerInterfaceWrapper) AddComicChapterLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicChapterLink(w, r, code, cv)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicChapterLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicChapterLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicChapterLink(w, r, code, cv, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicChapterLink operation middleware
func (siw *ServerInterfaceWrapper) GetComicChapterLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicChapterLink(w, r, code, cv, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicChapterLink operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicChapterLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicChapterLink(w, r, code, cv, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicLink operation middleware
func (siw *ServerInterfaceWrapper) AddComicLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicLink(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicLink(w, r, code, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicLink operation middleware
func (siw *ServerInterfaceWrapper) GetComicLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicLink(w, r, code, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicLink operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicLink(w, r, code, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLanguage operation middleware
func (siw *ServerInterfaceWrapper) ListLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLanguageParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLanguage(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddLanguage operation middleware
func (siw *ServerInterfaceWrapper) AddLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddLanguage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteLanguage operation middleware
func (siw *ServerInterfaceWrapper) DeleteLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLanguage(w, r, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLanguage operation middleware
func (siw *ServerInterfaceWrapper) GetLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLanguage(w, r, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateLanguage operation middleware
func (siw *ServerInterfaceWrapper) UpdateLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLanguage(w, r, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLink operation middleware
func (siw *ServerInterfaceWrapper) ListLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLinkParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLink(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddLink operation middleware
func (siw *ServerInterfaceWrapper) AddLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddLink(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLink(w, r, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLink(w, r, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateLink operation middleware
func (siw *ServerInterfaceWrapper) UpdateLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLink(w, r, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddLinkTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) AddLinkTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddLinkTLLanguage(w, r, websiteDomain, relativeURL)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteLinkTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) DeleteLinkTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLinkTLLanguage(w, r, websiteDomain, relativeURL, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLinkTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) GetLinkTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLinkTLLanguage(w, r, websiteDomain, relativeURL, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateLinkTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) UpdateLinkTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "websiteDomain" -------------
	var websiteDomain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "websiteDomain", runtime.ParamLocationPath, chi.URLParam(r, "websiteDomain"), &websiteDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "websiteDomain", Err: err})
		return
	}

	// ------------- Path parameter "relativeURL" -------------
	var relativeURL string

	err = runtime.BindStyledParameterWithLocation("simple", false, "relativeURL", runtime.ParamLocationPath, chi.URLParam(r, "relativeURL"), &relativeURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relativeURL", Err: err})
		return
	}

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLinkTLLanguage(w, r, websiteDomain, relativeURL, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebsite operation middleware
func (siw *ServerInterfaceWrapper) ListWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebsiteParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebsite(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddWebsite operation middleware
func (siw *ServerInterfaceWrapper) AddWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddWebsite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteWebsite operation middleware
func (siw *ServerInterfaceWrapper) DeleteWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWebsite(w, r, domain)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWebsite operation middleware
func (siw *ServerInterfaceWrapper) GetWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebsite(w, r, domain)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateWebsite operation middleware
func (siw *ServerInterfaceWrapper) UpdateWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWebsite(w, r, domain)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddWebsiteTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) AddWebsiteTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddWebsiteTLLanguage(w, r, domain)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteWebsiteTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) DeleteWebsiteTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWebsiteTLLanguage(w, r, domain, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWebsiteTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) GetWebsiteTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebsiteTLLanguage(w, r, domain, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateWebsiteTLLanguage operation middleware
func (siw *ServerInterfaceWrapper) UpdateWebsiteTLLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWebsiteTLLanguage(w, r, domain, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics", wrapper.ListComic)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics", wrapper.AddComic)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}", wrapper.DeleteComic)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}", wrapper.GetComic)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}", wrapper.UpdateComic)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/chapters", wrapper.ListComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/chapters", wrapper.AddComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/chapters/{cv}", wrapper.DeleteComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/chapters/{cv}", wrapper.GetComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/chapters/{cv}", wrapper.UpdateComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/chapters/{cv}/links", wrapper.AddComicChapterLink)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL}", wrapper.DeleteComicChapterLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL}", wrapper.GetComicChapterLink)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL}", wrapper.UpdateComicChapterLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/links", wrapper.AddComicLink)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/links/{websiteDomain}-{relativeURL}", wrapper.DeleteComicLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/links/{websiteDomain}-{relativeURL}", wrapper.GetComicLink)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/links/{websiteDomain}-{relativeURL}", wrapper.UpdateComicLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/languages", wrapper.ListLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/languages", wrapper.AddLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/languages/{ietf}", wrapper.DeleteLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/languages/{ietf}", wrapper.GetLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/languages/{ietf}", wrapper.UpdateLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/links", wrapper.ListLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/links", wrapper.AddLink)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/links/{websiteDomain}-{relativeURL}", wrapper.DeleteLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/links/{websiteDomain}-{relativeURL}", wrapper.GetLink)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/links/{websiteDomain}-{relativeURL}", wrapper.UpdateLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/links/{websiteDomain}-{relativeURL}/tl-languages", wrapper.AddLinkTLLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/links/{websiteDomain}-{relativeURL}/tl-languages/{ietf}", wrapper.DeleteLinkTLLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/links/{websiteDomain}-{relativeURL}/tl-languages/{ietf}", wrapper.GetLinkTLLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/links/{websiteDomain}-{relativeURL}/tl-languages/{ietf}", wrapper.UpdateLinkTLLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/websites", wrapper.ListWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/websites", wrapper.AddWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/websites/{domain}", wrapper.DeleteWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/websites/{domain}", wrapper.GetWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/websites/{domain}", wrapper.UpdateWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/websites/{domain}/tl-languages", wrapper.AddWebsiteTLLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/websites/{domain}/tl-languages/{ietf}", wrapper.DeleteWebsiteTLLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/websites/{domain}/tl-languages/{ietf}", wrapper.GetWebsiteTLLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/websites/{domain}/tl-languages/{ietf}", wrapper.UpdateWebsiteTLLanguage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tKfT/wIAAP//GR9D0ASSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
